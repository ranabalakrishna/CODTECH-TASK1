//BUILD A TOOL TO MONITOR CHANGES
 IN FILES BY CALCULATING AND
 COMPARING HASH VALUES//

import hashlib
import os
import time
import json

# Directory to monitor
MONITOR_DIR = "path/to/monitor"

# File to store hash values
HASH_FILE = "file_hashes.json"

def calculate_file_hash(file_path):
    """Calculate the hash of a file using SHA-256."""
    sha256_hash = hashlib.sha256()
    try:
        with open(file_path, "rb") as f:
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()
    except FileNotFoundError:
        return None

def load_hashes():
    """Load existing hashes from the JSON file."""
    if os.path.exists(HASH_FILE):
        with open(HASH_FILE, "r") as f:
            return json.load(f)
    return {}

def save_hashes(hash_dict):
    """Save current hashes to the JSON file."""
    with open(HASH_FILE, "w") as f:
        json.dump(hash_dict, f, indent=4)

def monitor_directory():
    """Monitor directory for changes in file hashes."""
    print(f"Monitoring changes in directory: {MONITOR_DIR}")
    previous_hashes = load_hashes()
    current_hashes = {}

    for root, _, files in os.walk(MONITOR_DIR):
        for file in files:
            file_path = os.path.join(root, file)
            file_hash = calculate_file_hash(file_path)
            if file_hash:
                current_hashes[file_path] = file_hash
                if file_path not in previous_hashes:
                    print(f"[NEW] File added: {file_path}")
                elif previous_hashes[file_path] != file_hash:
                    print(f"[MODIFIED] File changed: {file_path}")

    for file_path in previous_hashes:
        if file_path not in current_hashes:
            print(f"[DELETED] File removed: {file_path}")

    save_hashes(current_hashes)

if __name__ == "__main__":
    try:
        while True:
            monitor_directory()
            time.sleep(10)  # Check for changes every 10 seconds
    except KeyboardInterrupt:
        print("File monitoring stopped.")
