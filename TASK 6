//BUILD A TOOL TO ENCRYPT AND
 DECRYPT FILES USING ADVANCED
 ALGORITHMS LIKE AES-256.
 DELIVERABLE: A ROBUST
 ENCRYPTION APPLICATION WITH A
 USER-FRIENDLY INTERFACE //

import os
import base64
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.padding import PKCS7

# Constants
SALT_SIZE = 16
KEY_SIZE = 32
IV_SIZE = 16
ITERATIONS = 100000

# Helper Functions
def derive_key(password: str, salt: bytes) -> bytes:
    """Derive a key using PBKDF2."""
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=KEY_SIZE,
        salt=salt,
        iterations=ITERATIONS,
        backend=default_backend(),
    )
    return kdf.derive(password.encode())

def encrypt_file(password: str, input_file: str, output_file: str):
    """Encrypt a file using AES-256."""
    # Generate salt and IV
    salt = os.urandom(SALT_SIZE)
    iv = os.urandom(IV_SIZE)
    key = derive_key(password, salt)

    # Create cipher and encryptor
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()
    padder = PKCS7(algorithms.AES.block_size).padder()

    with open(input_file, "rb") as infile, open(output_file, "wb") as outfile:
        outfile.write(salt)  # Write salt to output
        outfile.write(iv)    # Write IV to output

        while chunk := infile.read(1024):
            padded_chunk = padder.update(chunk)
            encrypted_chunk = encryptor.update(padded_chunk)
            outfile.write(encrypted_chunk)

        # Finalize padding and encryption
        outfile.write(encryptor.update(padder.finalize()) + encryptor.finalize())

    print(f"File encrypted successfully: {output_file}")

def decrypt_file(password: str, input_file: str, output_file: str):
    """Decrypt a file using AES-256."""
    with open(input_file, "rb") as infile:
        salt = infile.read(SALT_SIZE)  # Read salt
        iv = infile.read(IV_SIZE)      # Read IV
        key = derive_key(password, salt)

        # Create cipher and decryptor
        cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
        decryptor = cipher.decryptor()
        unpadder = PKCS7(algorithms.AES.block_size).unpadder()

        with open(output_file, "wb") as outfile:
            while chunk := infile.read(1024):
                decrypted_chunk = decryptor.update(chunk)
                unpadded_chunk = unpadder.update(decrypted_chunk)
                outfile.write(unpadded_chunk)

            # Finalize decryption and unpadding
            outfile.write(unpadder.update(decryptor.finalize()) + unpadder.finalize())

    print(f"File decrypted successfully: {output_file}")

# Command-line Interface
def main():
    print("File Encryption and Decryption Tool")
    print("1. Encrypt a file")
    print("2. Decrypt a file")
    choice = input("Choose an option (1/2): ")

    if choice not in ["1", "2"]:
        print("Invalid choice. Exiting.")
        return

    password = input("Enter password: ")
    input_file = input("Enter input file path: ")
    output_file = input("Enter output file path: ")

    if choice == "1":
        encrypt_file(password, input_file, output_file)
    elif choice == "2":
        decrypt_file(password, input_file, output_file)

if __name__ == "__main__":
    main()
